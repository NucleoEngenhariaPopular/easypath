version: '3.8'

# Development environment - Frontend + Backend + Database + Engine + Redis + Messaging Gateway
# Usage: docker compose -f docker/docker-compose.dev.yml up
# Or use the helper script: ./scripts/start-dev.sh

services:
  # PostgreSQL database for Platform Backend
  postgres:
    image: postgres:13
    container_name: easypath_postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: easypath
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d easypath"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - easypath-network

  # Platform Backend (FastAPI)
  backend:
    build:
      context: ../apps/platform/backend
      dockerfile: Dockerfile
    container_name: easypath_backend
    ports:
      - "8000:8000"
    volumes:
      - ../apps/platform/backend:/app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgresql://user:password@postgres:5432/easypath"
      CORS_ORIGINS: "http://localhost:5173,http://frontend:5173"
    networks:
      - easypath-network
    restart: unless-stopped

  # Platform Frontend (React + Vite)
  frontend:
    build:
      context: ../apps/platform/frontend
      dockerfile: Dockerfile.dev
    container_name: easypath_frontend
    ports:
      - "5173:5173"
    volumes:
      - ../apps/platform/frontend:/app
      - /app/node_modules  # Use container's node_modules
    environment:
      VITE_API_URL: "http://backend:8000"
      VITE_MESSAGING_GATEWAY_URL: "http://messaging-gateway:8082"
    depends_on:
      - backend
      - messaging-gateway
    networks:
      - easypath-network
    restart: unless-stopped

  # Redis for Engine session storage
  redis:
    image: redis:7-alpine
    container_name: easypath_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - easypath-network
    restart: unless-stopped

  # Engine (FastAPI) - Optional, comment out if not needed
  engine:
    build:
      context: ../apps/engine
      dockerfile: Dockerfile.dev
    container_name: easypath_engine
    ports:
      - "8081:8081"
    volumes:
      - ../apps/engine:/app
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    environment:
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
      - PLATFORM_API_URL=http://backend:8000
    env_file:
      - ../apps/engine/.env
    networks:
      - easypath-network
    restart: unless-stopped

  # Messaging Gateway (Telegram/WhatsApp Integration)
  messaging-gateway:
    build:
      context: ../apps/messaging-gateway
      dockerfile: Dockerfile
    container_name: easypath_messaging_gateway
    ports:
      - "8082:8082"
    volumes:
      - ../apps/messaging-gateway:/app
    depends_on:
      postgres:
        condition: service_healthy
      engine:
        condition: service_started
    env_file:
      - ../apps/messaging-gateway/.env
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/easypath
      - ENGINE_API_URL=http://engine:8081
      - HOST=0.0.0.0
      - PORT=8082
    networks:
      - easypath-network
    restart: unless-stopped

  # ngrok - Exposes messaging-gateway webhooks with HTTPS (for Telegram)
  ngrok:
    image: ngrok/ngrok:latest
    container_name: easypath_ngrok
    command:
      - "http"
      - "messaging-gateway:8082"
    ports:
      - "4040:4040"  # ngrok web interface
    depends_on:
      - messaging-gateway
    env_file:
      - ../apps/messaging-gateway/.env
    networks:
      - easypath-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  easypath-network:
    driver: bridge
